#!/usr/bin/env ruby

#
# CAF Dump
#

$:.unshift(File.dirname(__FILE__))
require 'dump_helpers'
require 'zlib'


class BoxFile
  attr_accessor :boxes

  def initialize(data_stream, base_offset = 0)
    @data = data_stream
    @boxes = []
  end

  def parse
    file_type = @data.fourcc
    raise "Not a CAF file!" unless file_type == 'caff'
    file_version = @data.ui16
    file_flags = @data.ui16

    while (box = Box.read(@data, :file => self))
      boxes << box
      break if box.size == 0 # Zero size means it extends to the end of the file.
    end
    self
  end

  def print_tree
    puts
    @boxes.each { |box| box.print_tree }
    if @boxes.length == 0
      puts "Empty Tree!"
    end
    puts
  end

  def first_box(box_kind)
    @boxes.detect { |b| b.kind == box_kind }
  end
end

class Box
  attr_accessor :base_offset, :kind, :size, :data_size
  attr_accessor :data_offset, :data, :data_stream, :parent, :children, :file

  # Register each box kind with what handles it.
  HANDLERS = {}
  DESCRIPTIONS = {}
  def self.handles(kind, description = nil)
    Box::HANDLERS[kind] = self
    Box::DESCRIPTIONS[kind] = description
  end

  def self.initial_fields
    @initial_fields ||= []
  end

  def initial_fields
    self.class.initial_fields
  end

  # Shortcut to add a new initial field.
  def self.field(name, format, options = {})
    initial_fields << { :name => name, :format => format, :options => options }
    attr_accessor name
  end

  def self.read(stream, options = {})
    kind,size = stream.fourcc,stream.ui64 rescue nil
    return nil if size.nil?
    handler = Box::HANDLERS[kind] || Box
    handler.new(stream, kind, size, options)
  end

  def initialize(stream, kind, size, options = {})
    header_size = 12
    @data_offset = stream.pos
    @base_offset = @data_offset - header_size
    @kind = kind
    @size = size + header_size
    @data_size = size
    @data = nil
    @children = []
    @parent = options[:parent]
    @file = options[:file]
    read_data(stream)

    # Make sure to read in any trailing junk data.
    if stream.pos < @base_offset + @size
      stream.seek(@base_offset + @size)
    end
  end

  def read_data(stream)
    initial_fields.each do |field|
      send(field[:name].to_s + '=', stream.send(field[:format]))
    end
  end

  def description
    Box::DESCRIPTIONS[@kind]
  end

  def self.extended_description
    @extended_description ||= nil
  end

  def print_tree(prefix = '')
    color = :cyan
    if @children.length > 0
      color = :yellow
    elsif @parent.nil?
      color = :green
    end
    print prefix
    cprint @kind, color
    cprint(" - " + description, color) if description
    cprint(" (#{self.class.extended_description})", color) if self.class.extended_description
    puts " at #{@base_offset} (#{@size} bytes)"
    print_extra_info(prefix + '|   ')
    @children.each { |box| box.print_tree(prefix + '|   ') }
  end

  def print_extra_info(prefix = '')
    initial_fields.each do |field|
      if field[:options][:desc] || ($VERBOSE && !field[:options][:hide])
        print prefix
        cputs "#{field[:options][:desc] || field[:name].inspect}: #{send(field[:name])}", :dark_gray
      end
    end
  end

  def find_parent(parent_kind)
    return self if @kind == parent_kind
    return nil if @parent.nil?
    return @parent.find_parent(parent_kind)
  end

  def first_child(child_kind)
    @children.detect { |c| c.kind == child_kind }
  end
end


class DescBox < Box
  handles 'desc', 'Audio Description'

  field :sample_rate, :f64, :desc => 'Sample Rate'
  field :format_id, :fourcc, :desc => 'Format ID'
  field :format_flags, :ui32, :desc => 'Format Flags'
  field :bytes_per_packet, :ui32, :desc => 'Bytes per Packet'
  field :frames_per_packet, :ui32, :desc => 'Frames per Packet'
  field :channels_per_frame, :ui32, :desc => 'Channels per Frame'
  field :bits_per_channel, :ui32, :desc => 'Bits per Channel'
end

class PacketTable < Box
  handles 'pakt', 'Packet Table'

  field :number_packets,      :si64, :desc => 'Number of Packets'
  field :number_valid_frames, :si64, :desc => 'Number of Valid Frames'
  field :priming_frames,      :si32, :desc => 'Priming Frames'
  field :remainder_frames,    :si32, :desc => 'Remainder Frames'

  attr_accessor :entries

  def read_data(stream)
    super
    @entries = []
    desc = @file.first_box('desc') rescue nil
    if desc
      bpp = desc.bytes_per_packet
      fpp = desc.frames_per_packet
      bpp = nil if bpp == 0
      fpp = nil if fpp == 0
      @number_packets.times do
        entry = {}
        entry[:bytes] = bpp || stream.var_i
        entry[:frames] = fpp || stream.var_i
        @entries << entry
      end
    end
  end
  
  def print_extra_info(prefix = '')
    super

    if @number_packets != @entries.length
      print prefix
      cputs "Packet count doesn't match number of packets found!", :red
    end
    if $VERBOSE2
      @entries.each do |entry|
        print prefix
        cputs "Bytes: #{entry[:bytes]}, Frames: #{entry[:frames]}", :dark_gray
      end
    end
  end
end

class KukiBox < Box
  handles 'kuki', 'Magic Cookie'

  # If it makes a base KukiBox, then it's an unknown type.
  @extended_description = 'unknown'

  def file_format
    @file_format ||= @file.first_box('desc').format_id rescue nil
  end

  class << self
    def new(stream, kind, size, options = {})
      file_format = options[:file].first_box('desc').format_id rescue nil
      case file_format
      when 'alac'
        return AlacKukiBox.new(stream, kind, size, options)
      end
      super
    end
  end

end

class AlacKukiBox < Box
  @extended_description = "alac"
  field :frame_length, :ui32
  field :compatible_version, :ui8
  field :bit_depth, :ui8, :desc => "Bit Depth"
  field :pb, :ui8
  field :mb, :ui8
  field :kb, :ui8
  field :channels, :ui8, :desc => "Channels"
  field :max_run, :ui16
  field :max_frame_bytes, :ui32
  field :average_bitrate, :ui32, :desc => "Average Bitrate"
  field :sample_rate, :ui32, :desc => "Sample Rate"
end

class DataBox < Box
  handles 'data', 'Audio Data'

  field :edit_count, :ui32, :desc => 'Edit Count'
end



#################################################################################

# rainbow

$VERBOSE = false
$VERBOSE2 = false
$DEBUG = false

while ['-v','-vv','-nc'].include?(ARGV.first)
  arg = ARGV.shift
  case arg
  when '-v'
    $VERBOSE = true
  when '-vv'
    $VERBOSE = true
    $VERBOSE2 = true
  end
end

error "Please specify a file to inspect." unless ARGV.length > 0

input_filename = ARGV.first
error "Input file not found." unless File.exist?(input_filename)

file_size = File.size(input_filename)
input_file = File.open(input_filename)

file = BoxFile.new(input_file)
file.parse

file.print_tree
