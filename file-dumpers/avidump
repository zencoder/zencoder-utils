#!/usr/bin/env ruby

#
# AVI Dump
#

#
# useful resources:
#   http://www.jmcgowan.com/avitech.html
#   http://www.morgan-multimedia.com/download/odmlff2.pdf
#   http://www.alexander-noe.com/video/documentation/avi.pdf
#   http://wiki.multimedia.cx/index.php?title=AVI


$:.unshift(File.dirname(__FILE__))
require 'dump_helpers'


class Chunk
  attr_accessor :kind, :size, :data, :total_size

  def self.create(kind, *args)
    case kind
    when 'idx1'
      IndexChunk.new(kind, *args)
    when 'avih'
      AviHeaderChunk.new(kind, *args)
    when 'strh'
      StreamHeaderChunk.new(kind, *args)
    when 'strf'
      StreamFormatChunk.new(kind, *args)
    else
      new(kind, *args)
    end
  end

  def initialize(kind = nil, prefix = '')
    @kind = kind
    @size = 0
    @total_size = 0
    @data = ''
    @prefix = prefix
    @color = :none
  end
  
  def size=(amount)
    @size = amount
    @total_size = amount + 8
  end
  
  def data=(bytes)
    # By default, throw out the data so we don't waste memory.
  end
  
  def pputs(string, color = @color)
    cputs(@prefix+string, color)
  end

  def pprint(string, color = @color)
    cprint(@prefix+string, color)
  end
  
  def set_color(new_color)
    @color = new_color || :none
  end
end

class IndexChunk < Chunk
  attr_accessor :index
  
  def data=(bytes)
    @index = []
    while bytes.length > 16
      @index << { :kind => bytes[0,4], :pos => bytes[8,4].unpack('V').first, :length => bytes[12,4].unpack('V').first }
      bytes = bytes[16..-1]
    end
    set_color :cyan
    pputs "Parsed index with #{@index.length} entries:"
    @index.each do |entry|
      pputs "  Entry: #{entry.inspect}"
    end
  end
end

class AviHeaderChunk < Chunk
  FLAGS = {
    'AVIF_HASINDEX' =>       0x00000010,
    'AVIF_MUSTUSEINDEX' =>   0x00000020,
    'AVIF_ISINTERLEAVED' =>  0x00000100,
    'AVIF_TRUSTCKTYPE' =>    0x00000800,
    'AVIF_WASCAPTUREFILE' => 0x00010000,
    'AVIF_COPYRIGHTED' =>    0x00020000
  }

  def data=(bytes)
    set_color :cyan
    pputs "  AVI HEADER:", :green
    header = StringIO.new(bytes)
    pputs "  MicroSecPerFrame: #{header.ui32L}"
    pputs "  MaxBytesPerSec:   #{header.ui32L}"
    pputs "  Pad Granularity:  #{header.ui32L}", :dark_gray
    flags = header.ui32L
    flagnames = FLAGS.keys.select { |flagname| flags & FLAGS[flagname] > 0 }
    pputs "  Flags:            #{flags} (#{flagnames.join(', ')})"
    pputs "  Total Frames:     #{header.ui32L}"
    pputs "  Initial Frames:   #{header.ui32L}"
    pputs "  Streams:          #{header.ui32L}"
    pputs "  Buffer Size:      #{header.ui32L}"
    pputs "  Width:            #{header.ui32L}"
    pputs "  Height:           #{header.ui32L}"
    4.times { pputs "  Reserved (0):     #{header.ui32L}", :dark_gray }
  end
end

class StreamHeaderChunk < Chunk
  attr_accessor :format_type
  def data=(bytes)
    set_color :cyan
    pputs "  STREAM HEADER:", :green
    header = StringIO.new(bytes)
    @format_type = header.read(4)
    pputs "  Type:    #{@format_type}"
    pputs "  Handler: #{header.read(4)}"
    pputs "  Flags:          #{header.ui32L}"
    # #define AVISF_DISABLED 0x00000001
    # #define AVISF_VIDEO_PALCHANGES 0x00010000
    pputs "  Priority:       #{header.ui32L}"
    pputs "  Initial Frames: #{header.ui32L}" # How far ahead audio is from video
    scale = header.ui32L
    rate = header.ui32L
    fps = rate.to_f / scale
    pputs "  Scale:          #{scale}" # Timescale ...  rate/scale = samples per second (frame rate)
    pputs "  Rate:           #{rate}"
    pputs "    FPS:          #{sprintf('%0.3f',fps)}", :yellow
    pputs "  Start:          #{header.ui32L}" # Start time / delay
    len = header.ui32L
    pprint "  Length:         #{len} "
    pputs "(#{sprintf('%0.3f',len * scale.to_f / rate)} seconds)", :yellow
    pputs "  Buffer Size:    #{header.ui32L}"
    pputs "  Quality:        #{header.si32L} (1-10000 range, -1 = driver default)"
    pputs "  Sample Size:    #{header.ui32L} (0=varying)"
    pputs "  Frame:          (#{header.ui16L},#{header.ui16L})-(#{header.ui16L},#{header.ui16L})"
  end
end

class StreamFormatChunk < Chunk
  attr_accessor :format_type
  def initialize(kind = nil, prefix = '', format_type = nil)
    super(kind, prefix)
    @format_type = format_type
  end
  
  def data=(bytes)
    set_color :cyan
    pputs "  STREAM FORMAT:", :green
    header = StringIO.new(bytes)
    
    if format_type == 'vids'
      # BITMAPINFO
      
      header.ui32L # Struct size
      width = header.si32L
      height = header.si32L
      pputs "  Width:       #{width}"
      pputs "  Height:      #{height}"
      pputs "  Planes:      #{header.ui16L}"
      pputs "  BitCount:    #{header.ui16L}"
      pputs "  Compression: #{header.read(4)}"
      pputs "  SizeImage:   #{header.ui32L}"
      pputs "  xPPM:        #{header.si32L}"
      pputs "  yPPM:        #{header.si32L}"
      
    elsif format_type == 'auds'
      # WAVEFORMATEX
      codec_id = header.ui16L
      codec_name = nil
      case codec_id
      when 0x161
        codec_name = 'Windows Media Audio'
      when 0x162
        codec_name = 'Windows Media Audio 9 Professional'
      when 0x163
        codec_name = 'Windows Media Audio 9 Lossless'
      when 0x7A21
        codec_name = 'GSM-AMR (CBR)'
      when 0x7A22
        codec_name = 'GSM-AMR (VBR)'
      when 0x001
        codec_name = 'PCM Audio'
      end
      channels = header.ui16L
      sample_rate = header.ui32L
      bytes_per_second = header.ui32L
      block_alignment = header.ui16L
      bits_per_sample = header.ui16L
      pputs "  Codec ID: #{codec_id}#{" (#{codec_name})" if codec_name}"
      pputs "  Channels: #{channels}"
      pputs "  Sample Rate: #{sample_rate}"
    else
      pputs "  Other stream format type: #{format_type}", :yellow
    end
    
    # pputs "  Type:    #{header.read(4)}"
    # pputs "  Handler: #{header.read(4)}"
    # pputs "  Flags:          #{header.ui32L}"
    # # #define AVISF_DISABLED 0x00000001
    # # #define AVISF_VIDEO_PALCHANGES 0x00010000
    # pputs "  Priority:       #{header.ui32L}"
    # pputs "  Initial Frames: #{header.ui32L}" # How far ahead audio is from video
    # scale = header.ui32L
    # rate = header.ui32L
    # fps = rate.to_f / scale
    # pputs "  Scale:          #{scale}" # Timescale ...  rate/scale = samples per second (frame rate)
    # pputs "  Rate:           #{rate}"
    # pputs "    FPS:          #{sprintf('%0.3f',fps)}", :yellow
    # pputs "  Start:          #{header.ui32L}" # Start time / delay
    # len = header.ui32L
    # pputs "  Length:         #{len} (#{sprintf('%0.3f',len * scale.to_f / rate)} seconds)" # Based on timescale
    # pputs "  Buffer Size:    #{header.ui32L}"
    # pputs "  Quality:        #{header.si32L} (1-10000 range, -1 = driver default)"
    # pputs "  Sample Size:    #{header.ui32L} (0=varying)"
    # pputs "  Frame:          (#{header.ui16L},#{header.ui16L})-(#{header.ui16L},#{header.ui16L})"
  end
end

class List
  attr_accessor :kind, :size, :entries, :total_size
  def initialize(kind = nil)
    @kind = kind
    @size = 0
    @total_size = 0
    @entries = []
  end

  def <<(item)
    @entries << item
    @size += item.total_size
    @total_size = @size + 12
    @entries
  end

  def size=(amount)
    @size = amount
    @total_size = amount + 12
  end
end

CHUNK_DESCRIPTIONS = {
  'wb' => 'sound data',
  'db' => 'video data',
  'dc' => 'compressed video data',
  'pc' => 'palette change'
}

error "Please specify a file to inspect." unless ARGV.length > 0

input_filename = ARGV.first
error "Input file not found." unless File.exist?(input_filename)

file_size = File.size(input_filename)
@input_file = File.open(input_filename)

signature = @input_file.read(12)
error "Not an AVI file." unless signature[0,4] == 'RIFF' && signature[8,4] == 'AVI '
data_size = signature[4,4].unpack('V').first

puts "INFO:"
puts "Filename:  " + File.basename(input_filename)
puts "Size:      #{file_size}"
puts "Data Size: #{data_size}"

$current_format_type = nil

def read_list(prefix = '')
  size = @input_file.ui32L
  kind = @input_file.read(4)
  data_size = size - 4
  list = List.new(kind)
  list_data_start = @input_file.pos - 4

  puts "#{prefix}Found a '#{kind}' LIST of #{size} bytes at position #{list_data_start - 8}!"
  
  while (list.size < data_size) && (item = read_item(prefix + '    '))
    # puts "#{kind} list size: #{list.size}, item size: #{item.total_size}, Expected size: #{data_size}"
    list << item
    if item.kind_of?(StreamHeaderChunk)
      $current_format_type = item.format_type
    end
    if item.size == 0
      cputs "#{prefix}      INVALID LIST ENTRY FOUND: Size is 0 bytes.  Skipping rest of list!", :red
      break
    end
  end

  if @input_file.pos < (list_data_start + size)
    @input_file.skip(list_data_start+size - @input_file.pos)
  end

  list
end

def read_chunk(kind, prefix = '')
  if kind == 'strf'
    c = Chunk.create(kind, prefix, $current_format_type)
  else
    c = Chunk.create(kind, prefix)
  end
  c.size = @input_file.ui32L
  
  chunk_stream = kind[0,2]
  chunk_type = kind[2,2]
  
  print "#{prefix}Found a '#{kind}' chunk of #{c.size} bytes at position #{@input_file.pos - 8}!"
  if chunk_stream[0,1] == '0'
    print "  (Stream #{chunk_stream} #{CHUNK_DESCRIPTIONS[chunk_type]})"
  end
  puts
  
  c.data = @input_file.read(c.size)
  
  c
end

def read_item(prefix = '', max_size = nil)
  if (@input_file.pos % 2) == 1
    extra = @input_file.read(1)
    cputs "Dumping extra byte!", :red
  end

  kind = @input_file.read(4)
  return nil if kind.to_s.length < 4
  
  if kind == 'LIST' || kind == 'RIFF'
    read_list(prefix)
  else
    read_chunk(kind, prefix)
  end
end

while item = read_item
  if item.is_a?(Array)
    # puts "Found a LIST with #{item.entries.length} entries!"
  else
    # puts "Found a '#{item.kind}' chunk!"
  end
end

