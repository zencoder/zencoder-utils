#!/usr/bin/env ruby

#
# FLV Dump
#

$:.unshift(File.dirname(__FILE__))
require 'dump_helpers'

def decode_script_data(data, prefix = '', cur_pos = 0)
  data_type = data[cur_pos,1].unpack('C').first
  cur_pos += 1
    
  case data_type
  when 0
    # DOUBLE
    value = data[cur_pos,8].unpack('G').first
    cur_pos += 8
    puts "#{prefix}DOUBLE: #{value}"

  when 1
    value = data[cur_pos,1].unpack('C').first
    cur_pos += 1
    puts "#{prefix}BOOLEAN: #{value == 0 ? 'false' : 'true'}"

  when 2
    len = data[cur_pos,2].unpack('n').first
    cur_pos += 2
    if len > 0
      value = data[cur_pos, len]
      cur_pos += len
    else
      value = ''
    end
    puts "#{prefix}STRING (#{len}): #{value}"

  when 3
    puts "#{prefix}Object:"
    while cur_pos < data.length
      name_len = data[cur_pos,2].unpack('n').first
      cur_pos += 2
      if name_len == 0
        name = ''
        if data[cur_pos,1].unpack('C').first == 9
          # End of array.
          cur_pos += 1
          break
        end
      else
        name = data[cur_pos, name_len]
      end
      cur_pos += name_len
        
      puts "#{prefix}  #{name}"
      cur_pos = decode_script_data(data, prefix + '    ', cur_pos)

      break if cur_pos.nil?
    end

  when 7
    value = data[cur_pos,2].unpack('n').first
    cur_pos += 2
    puts "#{prefix}REFERENCE: #{value}"

  when 11
    # DATE
    value = data[cur_pos,8].unpack('G').first    
    cur_pos += 8
    local_time_offset = data[cur_pos, 2].unpack('s').first
    cur_pos += 2
    puts "#{prefix}DATE: #{value} (ms since Jan 1, 1970, UTC), time offset: #{local_time_offset} (may be wrong-endian!)"

  when 12
    # LONG STRING
    len = data[cur_pos,4].unpack('N').first
    cur_pos += 4
    if len > 0
      value = data[cur_pos, len]
      cur_pos += len
    else
      value = ''
    end
    puts "#{prefix}LONGSTRING (#{len}): #{value}"

  when 10
    array_len = data[cur_pos,4].unpack('N').first
    cur_pos += 4
    puts "#{prefix}Strict array (length = #{array_len})"
      
    array_len.times do |i|
      puts "#{prefix}  Index #{i}"
      cur_pos = decode_script_data(data, prefix + '    ', cur_pos)

      break if cur_pos.nil?
    end

  when 8
    array_len = data[cur_pos,4].unpack('N').first
    cur_pos += 4
    puts "#{prefix}ECMA array (length = #{array_len})"

    while true
      if cur_pos >= data.length
        puts "#{prefix}  RAN OUT OF ECMA ARRAY DATA!"
        break
      end

      name_len = data[cur_pos,2].unpack('n').first
      cur_pos += 2
      if name_len == 0
        name = ''
        if data[cur_pos,1].unpack('C').first == 9
          # End of array.
          break
        end
      else
        name = data[cur_pos, name_len]
      end
      cur_pos += name_len

      puts "#{prefix}  #{name}"
      cur_pos = decode_script_data(data, prefix + '    ', cur_pos)

      if cur_pos.nil?
        puts "#{prefix}  RAN OUT OF ECMA ARRAY DATA!"
        break
      end
    end

  else
    puts "#{prefix}Unsupported data type #{data_type} found!"
    return nil
  end

  return cur_pos
end

class AvccDecoder
  attr_accessor :sps_units, :pps_units

  PROFILES = {
    66 => 'Baseline',
    77 => 'Main',
    88 => 'Extended',
    100 => 'High'
  }
  COMPAT_FLAGS = {
    128 => 'Baseline',
     64 => 'Main',
     32 => 'Extended'
  }

  def initialize(data)
    stream = StringIO.new(data)

    @version = stream.ui8
    @profile = stream.ui8
    @profile_compat = stream.ui8
    @level = stream.ui8
    @nal_unit_length = (stream.ui8 & 3) + 1
    @sequence_set_count = (stream.ui8 & 31)
    @sequence_set_count.times do
      len = stream.ui16
      @sps_units ||= []
      @sps_units << stream.read(len)
    end
    @picture_set_count = stream.ui8
    @picture_set_count.times do
      len = stream.ui16
      @pps_units ||= []
      @pps_units << stream.read(len)
    end
  end

  def dump(prefix = '')
    puts "#{prefix}Version: #{@version}"
    puts "#{prefix}Profile: #{@profile} (#{PROFILES[@profile] || 'Unknown'})"
    if (@profile_compat & 0b11100000) > 0
      compat_msg = ' ('
      compat_msg += COMPAT_FLAGS.keys.map { |v| (@profile_compat & v > 0) ? COMPAT_FLAGS[v] : nil }.compact.join('/')
      compat_msg += ')'
    else
      compat_msg = ''
    end
    puts "#{prefix}Profile Compatibility: #{@profile_compat}#{compat_msg}"
    puts "#{prefix}Level: #{sprintf('%0.1f', @level / 10.0)}"
    puts "#{prefix}NAL Unit Length: #{@nal_unit_length}"
    puts "#{prefix}Sequence Set Count: #{@sequence_set_count}"
    print_sps_units(prefix+'  ')
    puts "#{prefix}Picture Set Count: #{@picture_set_count}"
  end

  def print_sps_units(prefix = '')
    @sps_units.each do |unit_data|
      header_byte = unit_data[0,1].unpack('C').first
      if header_byte >= 128
        puts "#{prefix}Invalid nal unit!"
        next
      end

      ref_idc = header_byte >> 5
      unit_type = header_byte & 0b11111

      clean_data = []

      nal_size = unit_data.length
      i = 1
      while i < nal_size
        if i + 2 < nal_size && unit_data[i,3] == "\x00\x00\x03"
          clean_data << unit_data[i,1].unpack('C').first
          clean_data << unit_data[i,1].unpack('C').first
          i += 2
        else
          clean_data << unit_data[i,1].unpack('C').first
        end
        i += 1
      end

      unit = Bitstream.new(clean_data, 0)

      profile = unit.getbits(8)
      constraint_flags = unit.getbits(8)
      level = unit.getbits(8)
      sps_id = unit.ue_v

      puts "#{prefix}NAL unit type: #{unit_type}"
      puts "#{prefix}  Profile: #{profile} (#{PROFILES[profile] || 'Unknown'})"
      puts "#{prefix}  Level: #{sprintf('%0.1f', level / 10.0)}"
      puts "#{prefix}  SPS ID: #{sps_id}"

      if [100,110,122,244,44,83,86,118,128].include?(profile)
        chroma_format_idc = unit.ue_v
        if chroma_format_idc == 3
          separate_color_plane_flag = unit.getbits(1)
        else
          separate_color_plane_flag = 0
        end

        bit_depth_luma_minus8 = unit.ue_v
        bit_depth_chroma_minus8 = unit.ue_v

        qpprime_y_zero_transform_bypass_flag = unit.getbits(1)
        seq_scaling_matrix_present_flag = unit.getbits(1)

        if seq_scaling_matrix_present_flag == 1
          entry_count = (chroma_format_idc != 3) ? 8 : 12
          entry_count.times do |i|
            if unit.getbits(1) == 1
              read_scaling_list(unit, (i < 6) ? 16 : 64)
            end
          end
        end

      else
        chroma_format_idc = 1
        separate_color_plane_flag = 0
        bit_depth_luma_minus8 = 0
        bit_depth_chroma_minus8 = 0
      end

      if separate_color_plane_flag == 1
        chroma_array_type = 0
      else
        chroma_array_type = chroma_format_idc
      end

      case chroma_format_idc
      when 1
        sub_width_c, sub_height_c = 2, 2
      when 2
        sub_width_c, sub_height_c = 2, 1
      else
        sub_width_c, sub_height_c = 1, 1
      end

      mb_width_c = 16 / sub_width_c
      mb_height_c = 16 / sub_height_c

      max_frame_num = 2 ** (unit.ue_v + 4)
      pic_order_count_type = unit.ue_v

      if pic_order_count_type == 0
        log2_max_pic_order_cnt_lsb_minus4 = unit.ue_v
      elsif pic_order_count_type == 1
        delta_pic_order_always_zero_flag = unit.getbits(1)
        offset_for_non_ref_pic = unit.se_v
        offset_for_top_to_bottom_field = unit.se_v
        num_ref_frames_in_pic_order_cnt_cycle = unit.ue_v

        offset_for_ref_frame = []
        num_ref_frames_in_pic_order_cnt_cycle.times do
          offset_for_ref_frame << unit.se_v
        end
      end

      max_num_ref_frames = unit.ue_v
      gaps_in_frame_num_value_allowed_flag = unit.getbits(1)

      pic_width_in_mbs_minus1 = unit.ue_v
      pic_height_in_map_units_minus1 = unit.ue_v
      frame_mbs_only_flag = unit.getbits(1)

      if frame_mbs_only_flag == 0
        mb_adaptive_frame_field_flag = unit.getbits(1)
      else
        mb_adaptive_frame_field_flag = 0
      end

      frame_height_in_mbs = (2-frame_mbs_only_flag) * (pic_height_in_map_units_minus1 + 1)

      puts "#{prefix}  Max Frame Num: #{max_frame_num}"
      puts "#{prefix}  Max Ref Frames: #{max_num_ref_frames}"

      puts "#{prefix}  Chroma Format: #{chroma_format_idc} (" + (['Mono','4:2:0','4:2:2','4:4:4'][chroma_format_idc] || 'Unknown') + ")"
      puts "#{prefix}  Bit Depth: #{bit_depth_luma_minus8 + 8} (luma), #{bit_depth_chroma_minus8 + 8} (chroma)"
      puts "#{prefix}  Macroblock Width: #{pic_width_in_mbs_minus1 + 1} (#{(pic_width_in_mbs_minus1 + 1) * 16} pixels luma, #{(pic_width_in_mbs_minus1 + 1) * mb_width_c} pixels chroma)"
      puts "#{prefix}  Map Unit Height: #{pic_height_in_map_units_minus1 + 1} (#{frame_height_in_mbs * 16} pixels luma, #{frame_height_in_mbs * mb_height_c} pixels chroma)"


      direct_8x8_inference_flag = unit.getbits(1)

      frame_cropping_flag = unit.getbits(1)
      if frame_cropping_flag == 1
        crop_offsets = []
        4.times { crop_offsets << unit.ue_v }
        puts "#{prefix}  Frame cropping offsets: " + crop_offsets.join(', ') + ' (L,R,T,B)'

        if chroma_array_type == 0
          crop_unit_x = 1
          crop_unit_y = 2 - frame_mbs_only_flag
        else
          crop_unit_x = sub_width_c
          crop_unit_y = sub_height_c * (2 - frame_mbs_only_flag)
        end

        croprect = []
        croprect << (crop_unit_x * crop_offsets[0])
        croprect << (crop_unit_y * crop_offsets[2])
        croprect << ((pic_width_in_mbs_minus1 + 1) * 16 - (crop_unit_x * crop_offsets[1] + 1))
        croprect << (frame_height_in_mbs * 16 - (crop_unit_y * crop_offsets[3] + 1))

        croprect << (croprect[2] - croprect[0] + 1)
        croprect << (croprect[3] - croprect[1] + 1)

        puts "#{prefix}  Frame crop rectangle: (#{croprect[0]},#{croprect[1]})-(#{croprect[2]},#{croprect[3]}) = (#{croprect[4]},#{croprect[5]})"
      end

      vui_parameters_present_flag = unit.getbits(1)

      puts "#{prefix}  VUI parameters present: #{vui_parameters_present_flag}"
      if vui_parameters_present_flag == 1

        aspect_ratio_info_present_flag = unit.getbits(1)
        if aspect_ratio_info_present_flag == 1
          aspect_ratio_idc = unit.getbits(8)
          if aspect_ratio_idc == 255
            sar_width = unit.getbits(16)
            sar_height = unit.getbits(16)
            puts "#{prefix}  Sample Aspect Ratio: #{sar_width}:#{sar_height}"
          else
            aspect_descriptions = ['Unspecified','1:1','12:11','10:11','16:11','40:33','24:11','20:11','32:11','80:33','18:11','15:11','64:33','160:99','4:3','3:2','2:1']
            puts "#{prefix}  Sample Aspect Ratio: #{aspect_descriptions[aspect_ratio_idc] || 'Unknown'}"
          end
        end

        overscan_info_present_flag = unit.getbits(1)
        if overscan_info_present_flag == 1
          overscan_appropriate_flag = unit.getbits(1)
          puts "#{prefix}  Overscan Appropriate: #{overscan_appropriate_flag}"
        end

        video_signal_type_present_flag = unit.getbits(1)
        if video_signal_type_present_flag == 1
          video_format = unit.getbits(3)
          video_full_range_flag = unit.getbits(1)
          video_format_descriptions = ['Component','PAL','NTSC','SECAM','MAC','Unspecified video format','Reserved','Reserved']
          puts "#{prefix}  Video Format: #{video_format_descriptions[video_format] || 'Unknown'}"
          puts "#{prefix}  Video Full Range Flag: #{video_full_range_flag}"

          color_description_preset_flag = unit.getbits(1)
          if color_description_preset_flag == 1
            color_primaries = unit.getbits(8)
            transfer_characteristics = unit.getbits(8)
            matrix_coefficients = unit.getbits(8)

            puts "#{prefix}  Color Description: primaries=#{color_primaries}, transfer=#{transfer_characteristics}, matrix=#{matrix_coefficients}"
          end
        end

        chroma_loc_info_present_flag = unit.getbits(1)
        if chroma_loc_info_present_flag == 1
          chroma_sample_loc_type_top_field = unit.ue_v
          chroma_sample_loc_type_bottom_field = unit.ue_v
          puts "#{prefix}  Chroma Sample Loc Type: top_field=#{chroma_sample_loc_type_top_field}, bottom_field=#{chroma_sample_loc_type_bottom_field}"
        end

        timing_info_present_flag = unit.getbits(1)
        if timing_info_present_flag == 1
          num_units_in_tick = unit.getbits(32)
          time_scale = unit.getbits(32)
          fixed_frame_rate_flag = unit.getbits(1)
          puts "#{prefix}  Timing Info: num_units_in_tick=#{num_units_in_tick}, time_scale=#{time_scale}, fixed_frame_rate_flag=#{fixed_frame_rate_flag}"
        end

        # After this comes nal_hrd params and vcl_hrd_params and all sorts of nonsense.
      end
    end

  end

  def read_scaling_list(unit, size)
    # Read and dump the scaling list...
    scaling_list = []
    last_scale = 8
    next_scale = 8

    size.times do |j|
      if next_scale != 0
        delta_scale = unit.se_v
        next_scale = (last_scale + delta_scale + 256) % 256
      end
      scaling_list[j] = (next_scale == 0) ? last_scale : next_scale
      last_scale = scaling_list[j]
    end

  end
end


tag_kinds = {
  8 => 'audio',
  9 => 'video',
  18 => 'script'
}
audio_formats = {
  0 => 'pcm, platform endian',
  1 => 'adpcm',
  2 => 'mp3',
  3 => 'pcm, little endian',
  4 => 'nellymoser 16-kHz',
  5 => 'nellymoser 8-kHz',
  6 => 'nellymoser',
  7 => 'G.711 a-law',
  8 => 'G.711 mu-law',
  9 => 'reserved',
  10 => 'aac',
  11 => 'speex',
  14 => 'mp3 8-kHz',
  15 => 'device-specific'
}
video_frame_types = {
  1 => 'keyframe',
  2 => 'inter frame',
  3 => 'disposable inter frame',
  4 => 'generated keyframe',
  5 => 'video info/command frame'
}
video_codecs = {
  1 => 'jpeg',
  2 => 'h.263',
  3 => 'screen video',
  4 => 'vp6',
  5 => 'vp6a',
  6 => 'screen video 2',
  7 => 'avc'
}

mpeg4_audio_object_types = {
  0 => "Null",
  1 => "AAC Main",
  2 => "AAC LC (Low Complexity)",
  3 => "AAC SSR (Scalable Sample Rate)",
  4 => "AAC LTP (Long Term Prediction)",
  5 => "SBR (Spectral Band Replication)",
  6 => "AAC Scalable",
  7 => "TwinVQ",
  8 => "CELP (Code Excited Linear Prediction)",
  9 => "HXVC (Harmonic Vector eXcitation Coding)",
  10 => "Reserved",
  11 => "Reserved",
  12 => "TTSI (Text-To-Speech Interface)",
  13 => "Main Synthesis",
  14 => "Wavetable Synthesis",
  15 => "General MIDI",
  16 => "Algorithmic Synthesis and Audio Effects",
  17 => "ER (Error Resilient) AAC LC",
  18 => "Reserved",
  19 => "ER AAC LTP",
  20 => "ER AAC Scalable",
  21 => "ER TwinVQ",
  22 => "ER BSAC (Bit-Sliced Arithmetic Coding)",
  23 => "ER AAC LD (Low Delay)",
  24 => "ER CELP",
  25 => "ER HVXC",
  26 => "ER HILN (Harmonic and Individual Lines plus Noise)",
  27 => "ER Parametric",
  28 => "SSC (SinuSoidal Coding)",
  29 => "PS (Parametric Stereo)",
  30 => "MPEG Surround",
  31 => "(Escape value)",
  32 => "Layer-1",
  33 => "Layer-2",
  34 => "Layer-3",
  35 => "DST (Direct Stream Transfer)",
  36 => "ALS (Audio Lossless)",
  37 => "SLS (Scalable LosslesS)",
  38 => "SLS non-core",
  39 => "ER AAC ELD (Enhanced Low Delay)",
  40 => "SMR (Symbolic Music Representation) Simple",
  41 => "SMR Main",
  42 => "USAC (Unified Speech and Audio Coding) (no SBR)",
  43 => "SAOC (Spatial Audio Object Coding)",
  44 => "LD MPEG Surround",
  45 => "USAC"
}

mpeg4_audio_frequencies = {
  0 => "96000",
  1 => "88200",
  2 => "64000",
  3 => "48000",
  4 => "44100",
  5 => "32000",
  6 => "24000",
  7 => "22050",
  8 => "16000",
  9 => "12000",
  10 => "11025",
  11 => "8000",
  12 => "7350",
  13 => "Reserved",
  14 => "Reserved"
}

mpeg4_channel_configurations = {
  0 => "Defined in AOT Specifc Config",
  1 => "1 channel: Center",
  2 => "2 channels: Left, Right",
  3 => "3 channels: Center, Left, Right",
  4 => "4 channels: C, L, R rear_C",
  5 => "5 channels: C, L, R rear_L, rear_R",
  6 => "6 channels: C, L, R rear_L, rear_R, LFE",
  7 => "8 channels: C, L, R side_L, side_R, rear_L, rear_R, LFE"
}

expect_ffmpeg_trailing_bytes = false

error "Please specify a file to inspect." unless ARGV.length > 0

input_filename = ARGV.first
error "Input file not found." unless File.exist?(input_filename)

file_size = File.size(input_filename)
input_file = File.open(input_filename)

signature = input_file.read(3)
error "Not an FLV file." unless signature == 'FLV'

puts
puts "INFO:"
puts "Filename: " + File.basename(input_filename)
puts "Size: #{file_size}"

puts
puts "HEADER:"

version = input_file.ui8
puts "Version: #{version}"

flags = input_file.ui8
puts "Has audio tags: " + ((flags & 0x4 > 0) ? 'yes' : 'no')
puts "Has video tags: " + ((flags & 0x1 > 0) ? 'yes' : 'no')
if (flags & 0b11111010) > 0
  puts "WARNING: reserved flag bits are not zero!"
end

data_loc = input_file.ui32
puts "Data offset: #{data_loc}"

puts
puts "BODY:"

more_to_read = true
while more_to_read

  prev_tag_size = input_file.ui32

  if input_file.eof?
    puts "LASTTAG:"
    puts "  Prev tag size: #{prev_tag_size}"

    more_to_read = false
    next
  end

  kind = input_file.ui8
  size = input_file.ui24
  timestamp = input_file.ui24
  timestamp_ext = input_file.ui8
  full_timestamp = timestamp_ext*(2**24) + timestamp
  stream_id = input_file.ui24

  kind_name = tag_kinds[kind] || 'unknown'

  if expect_ffmpeg_trailing_bytes
    expect_ffmpeg_trailing_bytes = false

    if kind == 0
      puts "LASTTAG:"
      puts "  Prev tag size: #{prev_tag_size}"

      puts "FFMPEG TRAILING VALUES:"
      duration_double = (size << 40) + (timestamp << 16) + (timestamp_ext << 8) + (stream_id >> 16)
      puts "  Duration: %0.4f"% [duration_double >> 32, duration_double & (2**32-1)].pack('NN').unpack('G').first

      size_double = ((stream_id & 0xff) << 56) + (input_file.ui32 << 24) + input_file.ui24

      puts "  Size: %0.4f"% [size_double >> 32, size_double & (2**32-1)].pack('NN').unpack('G').first

      # Should now be the end of the file.  But if it's not, at least give a warning.
      if input_file.eof?
        more_to_read = false
      else
        puts
        puts "UNKNOWN DATA FOLLOWING"
      end

      next
    end
  end

  puts "TAG: (offset #{input_file.pos})"
  puts "  Prev tag size: #{prev_tag_size}"  
  puts "  Type: #{kind} (#{kind_name})"
  puts "  Size: #{size}"
  puts "  Time: #{full_timestamp / 1000.0}"
  puts "  Stream ID: #{stream_id}"

  next if size == 0

  if kind_name == 'audio'
    format_flags = input_file.ui8
    format = (format_flags >> 4) & 15
    rate = (2 ** ((format_flags >> 2) & 3) * 5512.5).round
    bits = ((format_flags >> 1) & 1) * 8 + 8
    channels = format_flags & 1 + 1
    puts "  Audio format: #{format} (#{audio_formats[format] || 'unknown'})"
    puts "  Audio rate: #{rate}"
    puts "  Audio bits: #{bits}"
    puts "  Audio channels: #{channels}"

    if format == 10
      packet_type = input_file.ui8
      puts "  Audio packet type: #{packet_type} (#{packet_type == 0 ? 'sequence header' : 'raw'})"
      audio_specific_config = input_file.read(size - 2)
      if packet_type == 0
        if audio_specific_config.length >= 2
          asc = Bitstream.new(audio_specific_config)
          audio_object_type = asc.getbits(5)
          if audio_object_type == 31
            audio_object_type = asc.getbits(6) + 32 # Extended object type
          end
          puts "    Audio Object Type: #{audio_object_type} - #{mpeg4_audio_object_types[audio_object_type]}"

          frequency_index = asc.getbits(4)
          if frequency_index == 15
            frequency = asc.getbits(24) # Extended frequency
          else
            frequency = mpeg4_audio_frequencies[frequency_index]
          end
          puts "    Sampling Frequency: #{frequency}"
          
          channel_config = asc.getbits(4)
          puts "    Channel Config: #{mpeg4_channel_configurations[channel_config]}"

          # Check for extension data.
          extension_object_type = 0
          sbr_present_flag = 0
          ps_present_flag = 0
          extension_sampling_frequency_index = -1
          extension_sampling_frequency = -1
          if audio_object_type == 5 || audio_object_type == 29
            extension_object_type = 5
            sbr_present_flag = 1
            ps_present_flag = 1 if audio_object_type == 29
            extension_sampling_frequency_index = asc.getbits(4)
            if extension_sampling_frequency_index == 0xf
              extension_sampling_frequency = asc.getbits(24)
            else
              extension_sampling_frequency = mpeg4_audio_frequencies[extension_sampling_frequency_index]
            end
            puts "    Extension sampling frequency: #{extension_sampling_frequency}"

            audio_object_type = asc.getbits(5)
            if audio_object_type == 31
              audio_object_type = asc.getbits(6) + 32 # Extended object type
            end
            puts "    Updated Audio Object Type: #{audio_object_type} - #{mpeg4_audio_object_types[audio_object_type]}"
            puts "    SBR Present: #{sbr_present_flag}"
            puts "    PS Present: #{ps_present_flag}"
            
          end

          if audio_object_type == 2 # Or a bunch of others
            # GASpecificConfig
            frame_length_flag = asc.getbits(1)
            depends_on_core_coder = asc.getbits(1)
            if depends_on_core_coder == 1
              core_coder_delay = asc.getbits(14)
              puts "    Core coder delay: #{core_coder_delay}"
            end
            extension_flag = asc.getbits(1)
            if channel_config == 0
              puts "ERROR: Reading channel config from PCE is not currently supported."
              # Should read program_config_element here.
            end
            if audio_object_type == 6 || audio_object_type == 20
              layer_nr = asc.getbits(3)
            end
            if extension_flag == 1
              if audio_object_type == 22
                num_of_sub_frame = asc.getbits(5)
                layer_length = asc.getbits(11)
              end
              if [17,19,20.23].include?(audio_object_type)
                aac_section_data_resilience_flag = asc.getbits(1)
                aac_scalefactor_data_resilience_flag = asc.getbits(1)
                aac_spectral_data_resilience_flag = asc.getbits(1)
              end
              extension_flag_3 = asc.getbits(1)
              if extension_flag_3 == 1
                # Not yet defined!  Yay!
                puts "ERROR: Undefined version 3 data."
              end
            end
          end

          if extension_object_type != 5 && asc.remaining_bits >= 16
            sync_extension_type = asc.getbits(11)
            if sync_extension_type == 0x2b7

              extension_object_type = asc.getbits(5)
              if extension_object_type == 31
                extension_object_type = asc.getbits(6) + 32 # Extended object type
              end

              if extension_object_type == 5
                sbr_present_flag = asc.getbits(1)
                if sbr_present_flag == 1
                  extension_sampling_frequency_index = asc.getbits(4)
                  if extension_sampling_frequency_index == 0xf
                    extension_sampling_frequency = asc.getbits(24)
                  else
                    extension_sampling_frequency = mpeg4_audio_frequencies[extension_sampling_frequency_index]
                  end
                  puts "    Extension sampling frequency: #{extension_sampling_frequency}"
                  if asc.remaining_bits >= 12
                    sync_extension_type = asc.getbits(11)
                    if sync_extension_type == 0x548
                      ps_present_flag = 1
                    end
                  end
                end
              end
            end
            puts "    SBR Present: #{sbr_present_flag}"
            puts "    PS Present: #{ps_present_flag}"
          end

        else
          puts "    ERROR: AudioSpecificConfig too small! (Is #{audio_specific_config.length} bytes - need at least 2.) Assuming stream info is accurate."
        end
      end
    else
      input_file.read(size - 1)
    end
    

  elsif kind_name == 'video'
    format_flags = input_file.ui8
    frame_type = (format_flags >> 4) & 15
    codec_id = format_flags & 0xf
    
    puts "  Video frame type: #{frame_type} (#{video_frame_types[frame_type] || 'unknown'})"
    puts "  Video codec: #{codec_id} (#{video_codecs[codec_id] || 'unknown'})"
    
    if codec_id == 4 #&& frame_type == 1 # vp6 keyframe
      stream_bytes = input_file.read(9).bytes.to_a

      vp6_frame_mode = (stream_bytes[1] >> 7) & 1
      vp6_q_param = (stream_bytes[1] >> 1) & 0b00111111
      vp6_marker = stream_bytes[1] & 1
      
      puts "  VP6 Frame Mode: #{vp6_frame_mode}"
      puts "  VP6 Q Param: #{vp6_q_param}"
      puts "  VP6 Marker: #{vp6_marker} (#{vp6_marker == 1 ? 'VP60' : 'VP61/VP62'})"

      offset = 2
      # if frame_mode==0, there's an extra byte of data.
      if vp6_frame_mode == 0
        vp6_version = (stream_bytes[2] >> 3) & 0b00011111
        vp6_version2 = (stream_bytes[2] >> 1) & 3
        vp6_interlaced = stream_bytes[2] & 1
        
        puts "  VP6 Version: #{vp6_version}"
        puts "  VP6 Version2: #{vp6_version2}"
        puts "  VP6 Interlaced: #{vp6_interlaced}"

        offset += 1

        # if marker==1 or version2==0, there are 2 more extra data bytes
        if vp6_marker == 1 || vp6_version2 == 0
          vp6_secondary_buffer_offset = stream_bytes[offset] << 8 + stream_bytes[offset + 1]
          puts "  VP6 Secondary Buffer Offset: #{vp6_secondary_buffer_offset}"

          offset += 2
        end

        # Now offset points to the resolution values: [h_mb,w_mb,h_disp,w_disp]
        enc_width = stream_bytes[offset+1] * 16
        disp_width = stream_bytes[offset+3] * 16
        h_adjust = (stream_bytes[0] >> 4) & 15

        enc_height = stream_bytes[offset] * 16
        disp_height = stream_bytes[offset+2] * 16
        v_adjust = stream_bytes[0] & 0x0f

        width = disp_width - h_adjust
        height = disp_height - v_adjust

        if enc_width != disp_width || enc_height != disp_height
          puts "  Encoded Pixels: #{enc_width}"
          puts "  Encoded Pixels: #{enc_height}"
        end

        puts "  Video width: #{width} (#{disp_width} - #{h_adjust})"
        puts "  Video height: #{height} (#{disp_height} - #{v_adjust})"
      else
        if vp6_marker == 1
          vp6_secondary_buffer_offset = stream_bytes[offset] << 8 + stream_bytes[offset + 1]
          puts "  VP6 Secondary Buffer Offset: #{vp6_secondary_buffer_offset}"
        end
      end
      
      
      input_file.read(size - 10)

    elsif codec_id == 5 && frame_type == 1 # vp6a keyframe
      stream_bytes = input_file.read(9).bytes.to_a

      disp_width = stream_bytes[7] * 16
      h_adjust = (stream_bytes[0] >> 4) & 15
      disp_height = stream_bytes[6] * 16
      v_adjust = stream_bytes[0] & 0x0f

      width = disp_width - h_adjust
      height = disp_height - v_adjust

      puts "  Video width: #{width} (#{disp_width} - #{h_adjust})"
      puts "  Video height: #{height} (#{disp_height} - #{v_adjust})"

      input_file.read(size - 10)

    elsif codec_id == 7 # AVC frame
      packet_type = input_file.ui8
      bytes_read = 2

      composition_time = input_file.si24
      bytes_read += 3

      puts "  Packet Type: %s" % ({0 => 'AVC Sequence Header', 1 => 'AVC NALU', 2 => 'AVC end of sequence'}[packet_type] || 'unknown')
      if packet_type == 1 && size >= 5
        puts "  Composition Time Offset: %0.3f" % (composition_time / 1000.0)
        puts "  PTS: %0.3f" % ((full_timestamp + composition_time) / 1000.0)
      elsif packet_type == 1
        puts "  PTS: %0.3f" % (full_timestamp / 1000.0)
      elsif packet_type == 0
        avcc_size = size - bytes_read
        avcc = input_file.read(avcc_size)
        bytes_read = size
        puts "  AvcC (#{avcc_size} bytes):"
        begin
          AvccDecoder.new(avcc).dump('    ')
        rescue
          puts "Error decoding AvcC!"
        end
      elsif packet_type == 2
        # End of Sequence... Might have ffmpeg junk come next
        expect_ffmpeg_trailing_bytes = true
      end

      input_file.read(size - bytes_read)
    else

      input_file.read(size - 1)
    end

  elsif kind_name == 'script'
    name_tag_type = input_file.ui8
    puts "  WARNING: Script tag name is not string type!" unless name_tag_type == 2

    name_len = input_file.ui16
    # puts "  Script object name length: #{name_len}"
    name = input_file.read(name_len)
    puts "  Script object name: #{name}"
    
    subsequent_data = input_file.read(size - (name_len + 3))
    decode_script_data(subsequent_data, '    ')
  else
    input_file.read(size)
  end
  
end


puts
close(input_file) rescue nil
