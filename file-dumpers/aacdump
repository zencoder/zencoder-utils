#!/usr/bin/env ruby

#
# AAC Dump (for ADTS format .aac files)
# Can support leading ID3 tags, too.
#

$:.unshift(File.dirname(__FILE__))
require 'dump_helpers'

class IO
  def id3_size;
    bytes = read(4).unpack('C*')
    (bytes[3] & 0x7f) + ((bytes[2] & 0x7f) << 7) + ((bytes[1] & 0x7f) << 14) + ((bytes[0] & 0x7f) << 21)
  end
end

class Bitstream
  def huff(valid_values_hash)
    maxlen = valid_values_hash.keys.max.to_s(2).length
    bits_read = 0
    v = 0
    begin
      v = (v << 1) + getbits(1)
      bits_read += 1
    end until valid_values_hash[v] || bits_read > maxlen
    return nil if bits_read > maxlen
    v
  end
end

def parse_id3_tags(input_file)
  puts "Parsing ID3 tags..."
  major_version,minor_version,flags = input_file.read(3).unpack('C*')
  error "ID3 versions other than 2.4 are not yet supported!" unless major_version == 4
  
  total_id3_size = input_file.id3_size
  puts "  ID3 header size: #{total_id3_size}"

  data_bytes_read = 0
  while data_bytes_read < total_id3_size
    tag = input_file.read(4)
    size = input_file.id3_size
    flags = input_file.read(2)
    data = input_file.read(size)
    data_bytes_read += 10 + size
    puts "  ID3 tag: #{tag} of size #{size}"
    
    case tag
    when 'PRIV'
      if data =~ /^com\.apple\.streaming\.transportStreamTimestamp\x00/
        timestamp = $'.unpack('NN').inject(0) { |s,v| (s << 32) + v }
        puts "    Apple Timestamp: #{timestamp} (%0.3f seconds)" % (timestamp.to_f / 90000)
      end
    end
  end
end

MPEG2_PROFILES = {
  0 => "Main",
  1 => "Low Complexity",
  2 => "Scalable Sample Rate",
  3 => "<reserved>",
}

MPEG4_PROFILES = {
  0 => "Main",
  1 => "AAC-LC",
  2 => "AAC Scalable Sample Rate",
  3 => "AAC LTP",
}

AAC_SAMPLE_RATES = {
  0 => 96000,
  1 => 88200,
  2 => 64000,
  3 => 48000,
  4 => 44100,
  5 => 32000,
  6 => 24000,
  7 => 22050,
  8 => 16000,
  9 => 12000,
  10 => 11025,
  11 => 8000,
  12 => 7350,
  13 => "<reserved>",
  14 => "<reserved>",
  15 => "<forbidden>"
}

AAC_CHANNEL_CONFIGS = {
  0 => "<sent out of band>",
  1 => "1 channel: front-center",
  2 => "2 channels: front-left, front-right",
  3 => "3 channels: front-center, front-left, front-right",
  4 => "4 channels: front-center, front-left, front-right, back-center",
  5 => "5 channels: front-center, front-left, front-right, back-left, back-right",
  6 => "6 channels: front-center, front-left, front-right, back-left, back-right, LFE-channel",
  7 => "8 channels: front-center, front-left, front-right, side-left, side-right, back-left, back-right, LFE-channel",
}

class AacFrameDecoder
  ONLY_LONG_SEQUENCE = 0
  LONG_START_SEQUENCE = 1
  EIGHT_SHORT_SEQUENCE = 2
  LONG_STOP_SEQUENCE = 3

  ZERO_HCB = 0
  FIRST_PAIR_HCB = 5
  ESC_HCB = 11
  QUAD_LEN = 4
  PAIR_LEN = 2
  NOISE_HCB = 13
  INTENSITY_HCB2 = 14
  INTENSITY_HCB = 15
  ESC_FLAG = 16

  ID_SCE = 0
  ID_CPE = 1
  ID_CCE = 2
  ID_LFE = 3
  ID_DSE = 4
  ID_PCE = 5
  ID_FIL = 6
  ID_END = 7

  SYNTAX_ELEMENT_NAMES = {
    0 => 'SCE',
    1 => 'CPE',
    2 => 'CCE',
    3 => 'LFE',
    4 => 'DSE',
    5 => 'PCE',
    6 => 'FIL',
    7 => 'END'
  }

  EXT_FILL =          0b0000
  EXT_FILL_DATA =     0b0001
  EXT_DATA_ELEMENT  = 0b0010
  EXT_DYNAMIC_RANGE = 0b1011
  EXT_SBR_DATA =      0b1101
  EXT_SBR_DATA_CRC =  0b1110

  PRED_SFB_MAX = {
    96000 => 33,
    88200 => 33,
    64000 => 38,
    48000 => 40,
    44100 => 40,
    32000 => 40,
    24000 => 41,
    22050 => 41,
    16000 => 37,
    12000 => 37,
    11025 => 37,
     8000 => 34
  }

  NUM_SWB_LONG_WINDOW = {
    96000 => 41,
    88200 => 41,
    64000 => 47,
    48000 => 49,
    44100 => 49,
    32000 => 51,
    24000 => 47,
    22050 => 47,
    16000 => 43,
    12000 => 43,
    11025 => 43,
     8000 => 40
  }
  NUM_SWB_SHORT_WINDOW = {
    96000 => 12,
    88200 => 12,
    64000 => 12,
    48000 => 14,
    44100 => 14,
    32000 => 14,
    24000 => 15,
    22050 => 15,
    16000 => 15,
    12000 => 15,
    11025 => 15,
     8000 => 15
  }

  SF_HUFF_VALUES = {
    0xa => true,
    0xb => true,
    0xc => true,
    0xf6 => true,
    0xf7 => true,
    0xf8 => true,
    0xf9 => true,
    0xfa => true,
    0xff4 => true,
    0xff5 => true,
    0xff6 => true,
    0xff7 => true,
    0xff8 => true,
    0xff9 => true,
    0xfff0 => true,
    0xfff1 => true,
    0xfff2 => true,
    0xfff3 => true,
    0xfff4 => true,
    0xfff5 => true,
    0xfff6 => true,
    0x0 => true,
    0x1a => true,
    0x1b => true,
    0x1f6 => true,
    0x1f7 => true,
    0x1f8 => true,
    0x1f9 => true,
    0x1ff4 => true,
    0x1ff5 => true,
    0x1ff6 => true,
    0x1ff7 => true,
    0x1ff8 => true,
    0x1ffee => true,
    0x1ffef => true,
    0x1fff0 => true,
    0x3a => true,
    0x3b => true,
    0x3f4 => true,
    0x3f5 => true,
    0x3f6 => true,
    0x3f7 => true,
    0x3f8 => true,
    0x3f9 => true,
    0x3ff2 => true,
    0x3ff3 => true,
    0x3ff4 => true,
    0x3ff5 => true,
    0x3ff6 => true,
    0x3ff7 => true,
    0x3ff8 => true,
    0x3ff9 => true,
    0x3ffe2 => true,
    0x3ffe3 => true,
    0x3ffe4 => true,
    0x3ffe5 => true,
    0x3ffe6 => true,
    0x3ffe7 => true,
    0x3ffe8 => true,
    0x4 => true,
    0x7a => true,
    0x7f4 => true,
    0x7f5 => true,
    0x7f6 => true,
    0x7f7 => true,
    0x7f8 => true,
    0x7f9 => true,
    0x7ff4 => true,
    0x7ff5 => true,
    0x7ff6 => true,
    0x7ff7 => true,
    0x7ffd2 => true,
    0x7ffd3 => true,
    0x7ffd4 => true,
    0x7ffd5 => true,
    0x7ffd6 => true,
    0x7ffd7 => true,
    0x7ffd8 => true,
    0x7ffd9 => true,
    0x7ffda => true,
    0x7ffdb => true,
    0x7ffdc => true,
    0x7ffdd => true,
    0x7ffde => true,
    0x7ffdf => true,
    0x7ffe0 => true,
    0x7ffe1 => true,
    0x7ffe2 => true,
    0x7ffe3 => true,
    0x7ffe4 => true,
    0x7ffe5 => true,
    0x7ffe6 => true,
    0x7ffe7 => true,
    0x7ffe8 => true,
    0x7ffe9 => true,
    0x7ffea => true,
    0x7ffeb => true,
    0x7ffec => true,
    0x7ffed => true,
    0x7ffee => true,
    0x7ffef => true,
    0x7fff0 => true,
    0x7fff1 => true,
    0x7fff2 => true,
    0x7fff3 => true,
    0x7fff4 => true,
    0x7fff5 => true,
    0x7fff6 => true,
    0x7fff7 => true,
    0x7fff8 => true,
    0x7fff9 => true,
    0x7fffa => true,
    0x7fffb => true,
    0x7fffc => true,
    0x7fffd => true,
    0x7fffe => true,
    0x7ffff => true,
    0x38 => true,
    0x39 => true,
    0x78 => true,
    0x79 => true
  }

  SWB_OFFSET_LONG_WINDOW = {}

  SWB_OFFSET_LONG_WINDOW[24000] = {
     0 => 0,
     1 => 4,
     2 => 8,
     3 => 12,
     4 => 16,
     5 => 20,
     6 => 24,
     7 => 28,
     8 => 32,
     9 => 36,
     10 => 40,
     11 => 44,
     12 => 52,
     13 => 60,
     14 => 68,
     15 => 76,
     16 => 84,
     17 => 92,
     18 => 100,
     19 => 108,
     20 => 116,
     21 => 124,
     22 => 136,
     24 => 160,
     25 => 172,
     26 => 188,
     27 => 204,
     28 => 220,
     29 => 240,
     30 => 260,
     31 => 284,
     32 => 308,
     33 => 336,
     34 => 364,
     35 => 396,
     36 => 432,
     37 => 468,
     38 => 508,
     39 => 552,
     40 => 600,
     41 => 652,
     42 => 704,
     43 => 768,
     44 => 832,
     45 => 896,
     46 => 960
  }
  SWB_OFFSET_LONG_WINDOW[24000].default = 1204
  
  SWB_OFFSET_LONG_WINDOW[44100] = {
     0 => 0,
     1 => 4,
     2 => 8,
     3 => 12,
     4 => 16,
     5 => 20,
     6 => 24,
     7 => 28,
     8 => 32,
     9 => 36,
    10 => 40,
    11 => 48,
    12 => 56,
    13 => 64,
    14 => 72,
    15 => 80,
    16 => 88,
    17 => 96,
    18 => 108,
    19 => 120,
    20 => 132,
    21 => 144,
    22 => 160,
    23 => 176,
    25 => 216,
    26 => 240,
    27 => 264,
    28 => 292,
    29 => 320,
    30 => 352,
    31 => 384,
    32 => 416,
    33 => 448,
    34 => 480,
    35 => 512,
    36 => 544,
    37 => 576,
    38 => 608,
    39 => 640,
    40 => 672,
    41 => 704,
    42 => 736,
    43 => 768,
    44 => 800,
    45 => 832,
    46 => 864,
    47 => 896,
    48 => 928
  }
  SWB_OFFSET_LONG_WINDOW[44100].default = 1024

  SWB_OFFSET_LONG_WINDOW[48000] = SWB_OFFSET_LONG_WINDOW[44100]
    

  def initialize(frame_data, num_blocks, sample_rate, protection_absent)
    @data = Bitstream.new(frame_data)
    @num_blocks = num_blocks
    @sample_rate = sample_rate
    @protection_absent = protection_absent
    decode_frame
  end

  def decode_frame
    if @num_blocks == 0
      # adts_error_check
      if @protection_absent == 0
        crc = @data.getbits(16)
      end
    
      # raw_data_block
      while @data.bit_offset < @data.total_bits
        puts "Data: #{@data.bit_offset} / #{@data.total_bits}"
        syntax_element = read_syntax_element
        break if syntax_element[:id] == ID_END
    
        # break # We don't parse 'em right yet, so quit out.
      end
    else
      # adts_header_error_check
      if @protection_absent == 0
        positions = []
        @num_blocks.times { positions << @data.getbits(16) }
        crc = @data.getbits(16)
      end
    
      (@num_blocks + 1).times do
        # raw_data_block
        while @data.bit_offset < @data.total_bits
          syntax_element = read_syntax_element
          break if syntax_element[:id] == ID_END
    
          # break # We don't parse 'em right yet, so quit out.
        end
    
        # adts_raw_data_block_error_check
        if @protection_absent == 0
          crc = @data.getbits(16)
        end
      end
    end
  end

  def ics_info
    ics_reserved_bit = @data.getbits(1)
    window_sequence = @data.getbits(2)
    window_shape = @data.getbits(1)
    if window_sequence == EIGHT_SHORT_SEQUENCE
      max_sfb = @data.getbits(4)
      scale_factor_grouping = @data.getbits(7)
    else
      max_sfb = @data.getbits(6)
      predictor_data_present = @data.getbits(1)
      if predictor_data_present == 1
        predictor_reset = @data.getbits(1)
        if predictor_reset == 1
          predictor_reset_group_number = @data.getbits(5)
        end
        prediction_used = []
        [max_sfb, PRED_SFB_MAX[@sample_rate]].min.times do
          prediction_used << @data.getbits(1)
        end
      end
    end

    window_group_length = []
    @sect_sfb_offset = []
    swb_offset = []
    
    ics_result = {}
    ics_result[:window_sequence] = window_sequence
    ics_result[:window_shape] = window_shape
    ics_result[:max_sfb] = max_sfb

    # CALCULATE VALUES USED FOR OTHER STUFF
    case window_sequence
    when ONLY_LONG_SEQUENCE,LONG_START_SEQUENCE,LONG_STOP_SEQUENCE
      num_windows = 1;
      num_window_groups = 1;
      window_group_length[num_window_groups-1] = 1;
      num_swb = NUM_SWB_LONG_WINDOW[@sample_rate];
      # preparation of sect_sfb_offset for long blocks
      # also copy the last value!
      (max_sfb+1).times do |i|
        @sect_sfb_offset[0] ||= []
        @sect_sfb_offset[0][i] = SWB_OFFSET_LONG_WINDOW[@sample_rate][i];
        # swb_offset[i] = swb_offset_long_window[@sampling_freq_index][i];
      end
    when EIGHT_SHORT_SEQUENCE
      num_windows = 8;
      num_window_groups = 1;
      window_group_length[num_window_groups-1] = 1;
      num_swb = NUM_SWB_SHORT_WINDOW[@sample_rate];
      (NUM_SWB_SHORT_WINDOW[@sample_rate] + 1).times do |i|
        swb_offset[i] = swb_offset_short_window[@sampling_freq_index][i];
      end
      (num_windows - 1).times do |i|
        if (bit_set(scale_factor_grouping,6-i)) == 0
          num_window_groups += 1;
          window_group_length[num_window_groups-1] = 1;
        else
          window_group_length[num_window_groups-1] += 1;
        end
      end
      # preparation of sect_sfb_offset for short blocks
      num_window_groups.times do |g|
        sect_sfb = 0;
        offset = 0;
        max_sfb.times do |i|
          width = swb_offset_short_window[@sampling_freq_index][i+1] - swb_offset_short_window[@sampling_freq_index][i];
          width *= window_group_length[g];
          @sect_sfb_offset[g][sect_sfb += 1] = offset;
          offset += width;
        end
        @sect_sfb_offset[g][sect_sfb] = offset;
      end
    end

    ics_result[:num_windows] = num_windows
    ics_result[:num_window_groups] = num_window_groups

    ics_result
  end

  def extension_payload(count)
    extension_type = @data.getbits(4)
    case extension_type
    when EXT_DYNAMIC_RANGE
      puts "    Dynamic Range Data"
      raise "EXT_DYNAMIC_RANGE not yet supported!"
      # dynamic_range_info(@data)
    when EXT_SBR_DATA
      puts "    SBR DATA!"
      raise "EXT_SBR_DATA not yet supported!"
      # sbr_extension_data(@data, id_aac, 0)
    when EXT_SBR_DATA_CRC
      puts "    SBR DATA (CRC)!"
      raise "EXT_SBR_DATA_CRC not yet supported!"
      # sbr_extension_data(@data, id_aac, 1)
    when EXT_DATA_ELEMENT # from 14496-3, 2005 version
      puts "    Data Element"
      raise "EXT_DATA_ELEMENT not yet supported!"
      
    when EXT_FILL_DATA
      puts "    Extra Fill Data (#{count} bytes)"
      fill_nibble = @data.getbits(4) # Should be '0000'
      (count - 1).times { @data.getbits(8) } # Each should be '10100101'
      return count
    else
      puts "    Other Fill Data (type #{extension_type}) (#{count} bytes)"
      # Treat just like EXT_FILL_DATA but if we were
      # validating, we wouldn't care what the data was.
      fill_nibble = @data.getbits(4) # Can be anything
      (count - 1).times { @data.getbits(8) } # Can be anything
      return count
    end
  end

  def read_syntax_element
    se_id = @data.getbits(3)
    puts "  Syntax element: #{se_id} (#{SYNTAX_ELEMENT_NAMES[se_id]})"
    case se_id
    when ID_SCE
      instance_tag = @data.getbits(4)
      puts "    Instance tag: #{instance_tag}"
      individual_channel_stream(0)
      {}
    when ID_CPE
      instance_tag = @data.getbits(4)
      puts "    Instance tag: #{instance_tag}"
      common_window = @data.getbits(1)
      puts "    Common Window: #{common_window}"
      if common_window == 1
        @ics = ics_info
        puts "    ICS Info: #{@ics.inspect}"
        ms_mask_present = @data.getbits(2)
        if ms_mask_present == 1
          raise "ms_mask stuff not yet supported"
        end
      end
      individual_channel_stream(common_window)
      individual_channel_stream(common_window)
      {}
    when ID_CCE
      raise "CCE not yet supported."
      {}
    when ID_LFE
      raise "LFE not yet supported."
      {}
    when ID_DSE
      raise "DSE not yet supported."
      {}
    when ID_PCE
      raise "PCE not yet supported."
      {}
    when ID_FIL
      count = @data.getbits(4)
      if count == 15
        count += @data.getbits(8)
      end
      puts "    #{count} bytes of extension payload data"
      while count > 0
        count -= extension_payload(count)
      end
      { :id => ID_FIL }
    when ID_END
      { :id => ID_END }
    else
      puts "  UNKNOWN SYNTAX ELEMENT: #{se_id}"
      { :id => -1 }
    end
  end

  def individual_channel_stream(common_window)
    global_gain = @data.getbits(8)
    if common_window == 0
      @ics = ics_info
    end
    puts "AAA - #{@data.bit_offset}"
    section_data
    puts "BBB - #{@data.bit_offset}"

    scale_factor_data
    puts "CCC - #{@data.bit_offset}"

    pulse_data_present = @data.getbits(1)
    if pulse_data_present
      puts "CCCB - #{@data.bit_offset}"
      pulse_data
    end
    puts "DDD - #{@data.bit_offset}"

    tns_data_present = @data.getbits(1)
    if tns_data_present
      puts "DDDB - #{@data.bit_offset}"
      tns_data
    end
    puts "EEE - #{@data.bit_offset}"

    gain_control_data_present = @data.getbits(1)
    if gain_control_data_present
      gain_control_data
    end
    puts "FFF"

    result = spectral_data
    puts "GGG"
    result
  end

  def section_data
    if @ics && @ics[:window_sequence] == EIGHT_SHORT_SEQUENCE
      sect_esc_val = (1 << 3) - 1
      sect_len_incr_bitcount = 3
    else
      sect_esc_val = (1 << 3) - 1
      sect_len_incr_bitcount = 5
    end

    @sect_cb = []
    @sect_start = []
    @sect_end = []
    @sfb_cb = []
    @num_sec = []
    
    @ics[:num_window_groups].times do |g|
      k = 0
      i = 0
      while k < @ics[:max_sfb]
        @sect_cb[g] ||= []
        @sect_cb[g][i] = @data.getbits(4)
        sect_len = 0
        while (sect_len_incr = @data.getbits(sect_len_incr_bitcount)) == sect_esc_val
          sect_len += sect_esc_val
        end
        sect_len += sect_len_incr

        @sect_start[g] ||= []
        @sect_end[g] ||= []
        @sect_start[g][i] = k
        @sect_end[g][i] = k + sect_len

        @sfb_cb[g] ||= []
        k.upto(k+sect_len) do |sfb|
          @sfb_cb[g][sfb] = @sect_cb[g][i]
        end
        k += sect_len
        i += 1
      end
      @num_sec[g] = i
    end
  end

  def scale_factor_data
    @ics[:num_window_groups].times do |g|
      @ics[:max_sfb].times do |sfb|
        if @sfb_cb[g][sfb] != ZERO_HCB
          # Technically the purpose of this next field depends on is_intensity(g,sfb), but the
          # length is the same either way, so we'll just read/dispose unless we need hcode_sf or dpcm_is_position or dpcm_sf
          result = @data.huff(SF_HUFF_VALUES)
          raise "Invalid Huffman table value!" if result.nil?
        end
      end
    end
  end

  def pulse_data
    number_pulse = @data.getbits(2)
    pulse_start_sfb = @data.getbits(6)

    pulse_offset = []
    pulse_amp = []
    number_pulse.times do |i|
      pulse_offset << @data.getbits(5)
      pulse_amp << @data.getbits(4)
    end
  end

  def tns_data
    if @ics && @ics[:window_sequence] == EIGHT_SHORT_SEQUENCE
      n_filt_bits = 1
      length_bits = 4
      order_bits = 3
    else
      n_filt_bits = 2
      length_bits = 6
      order_bits = 5
    end

    n_filt = []
    length = []
    order = []
    coef_compress = []
    direction = []
    coef = []
    coef_res = []
    @ics[:num_windows].times do |w|
      n_filt[w] = @data.getbits(n_filt_bits)
      if n_filt[w] > 0
        coef_res[w] = @data.getbits(1)
      end
      length[w] = []
      order[w] = []
      direction[w] = []
      coef_compress[w] = []
      coef[w] = []
      n_filt[w].times do |filt|
        length[w][filt] = @data.getbits(length_bits)
        order[w][filt] = @data.getbits(order_bits)
        if order[w][filt] > 0
          direction[w][filt] = @data.getbits(1)
          coef_compress[w][filt] = @data.getbits(1)
          if coef_compress[w][filt] == 1
            # coef MSB is omitted, so coef len is 1
            coef_len = 1
          else
            # coef MSB is not omitted, so coef len is 2
            coef_len = 2
          end
          coef[w][filt] = []
          order[w][filt].times do |i|
            coef[w][filt][i] = @data.getbits(coef_len)
          end
        end
      end
    end
  end

  def gain_control_data
    max_band = @data.getbits(2)
    window_sequence = @ics[:window_sequence]
    
    adjust_num = []
    alevcode = []
    aloccode = []

    if window_sequence == ONLY_LONG_SEQUENCE
      1.upto(max_band) do |bd|
        adjust_num[bd] = []
        alevcode[bd] = []
        aloccode[bd] = []
        1.times do |wd|
          adjust_num[bd][wd] = @data.getbits(3)
          alevcode[bd][wd] = []
          aloccode[bd][wd] = []
          adjust_num[bd][wd].times do |ad|
            alevcode[bd][wd][ad] = @data.getbits(4)
            aloccode[bd][wd][ad] = @data.getbits(5)
          end
        end
      end
    elsif window_sequence == LONG_START_SEQUENCE
      1.upto(max_band) do |bd|
        adjust_num[bd] = []
        alevcode[bd] = []
        aloccode[bd] = []
        2.times do |wd|
          adjust_num[bd][wd] = @data.getbits(3)
          alevcode[bd][wd] = []
          aloccode[bd][wd] = []
          adjust_num[bd][wd].times do |ad|
            alevcode[bd][wd][ad] = @data.getbits(4)
            if wd == 0
              aloccode[bd][wd][ad] = @data.getbits(4)
            else
              aloccode[bd][wd][ad] = @data.getbits(2)
            end
          end
        end
      end
    elsif window_sequence == EIGHT_SHORT_SEQUENCE
      1.upto(max_band) do |bd|
        adjust_num[bd] = []
        alevcode[bd] = []
        aloccode[bd] = []
        8.times do |wd|
          adjust_num[bd][wd] = @data.getbits(3)
          alevcode[bd][wd] = []
          aloccode[bd][wd] = []
          adjust_num[bd][wd].times do |ad|
            alevcode[bd][wd][ad] = @data.getbits(4)
            aloccode[bd][wd][ad] = @data.getbits(2)
          end
        end
      end
    elsif window_sequence == LONG_STOP_SEQUENCE
      1.upto(max_band) do |bd|
        adjust_num[bd] = []
        alevcode[bd] = []
        aloccode[bd] = []
        2.times do |wd|
          adjust_num[bd][wd] = @data.getbits(3)
          alevcode[bd][wd] = []
          aloccode[bd][wd] = []
          adjust_num[bd][wd].times do |ad|
            alevcode[bd][wd][ad] = @data.getbits(4)
            if wd == 0
              aloccode[bd][wd][ad] = @data.getbits(4)
            else
              aloccode[bd][wd][ad] = @data.getbits(5)
            end
          end
        end
      end
    end
  end

  def spectral_data
    @ics[:num_window_groups].times do |g|
      @num_sec[g].times do |i|
        if @sect_cb[g][i] != ZERO_HCB && @sect_cb[g][i] != NOISE_HCB && @sect_cb[g][i] != INTENSITY_HCB && @sect_cb[g][i] != INTENSITY_HCB2
          k = @sect_sfb_offset[g][@sect_start[g][i]]
          while k < @sect_sfb_offset[g][@sect_end[g][i]]
            if @sect_cb[g][i] < FIRST_PAIR_HCB
              puts "CODEBOOK: #{@sect_cb[g][i]}"
              # hcod[@sect_cb[g][i]][w][x][y][z] = @data.vlclbf
              # if (unsigned_cb[@sect_cb[g][i]])
              #   quad_sign_bits = @data.bslbf
              # end
              k += QUAD_LEN
            else
              puts "CODEBOOK: #{@sect_cb[g][i]}"
              # hcod[@sect_cb[g][i]][y][z] = @data.vlclbf
              # if unsigned_cb[@sect_cb[g][i]]
              #   pair_sign_bits = @data.bslbf
              # end
              k += PAIR_LEN
              # if @sect_cb[g][i] == ESC_HCB
              #   if y == ESC_FLAG
              #     hcod_esc_y = @data.vlclbf
              #   end
              #   if z == ESC_FLAG
              #     hcod_esc_z = @data.vlclbf
              #   end
              # end
            end
          end
        end
      end
    end
  end
end

# Check for verbose mode first.
if ARGV.first == '-v'
  verbose_mode = true
  ARGV.shift
end

error "Please specify a file to inspect." unless ARGV.length > 0

input_filename = ARGV.first
error "Input file not found." unless File.exist?(input_filename)

file_size = File.size(input_filename)
input_file = File.open(input_filename)

puts
puts "INFO:"
puts "Filename: " + File.basename(input_filename)
puts "Size: #{file_size}"

signature = input_file.read(3)
while signature == 'ID3'
  parse_id3_tags(input_file)
  signature = input_file.read(3)
end

error "Not an ADTS AAC file" unless signature.unpack('H*').first =~ /^fff/


while !input_file.eof?
  if signature
    adts_header_data = signature + input_file.read(4)
    signature = nil
  else
    adts_header_data = input_file.read(7)
  end
  header = Bitstream.new(adts_header_data)

  syncword =                       header.getbits(12)
  id =                             header.getbits(1)
  layer =                          header.getbits(2)
  protection_absent =              header.getbits(1)
  profile =                        header.getbits(2)
  sampling_frequency_index =       header.getbits(4)
  private_bit =                    header.getbits(1)
  channel_configuration =          header.getbits(3)
  is_copy =                        header.getbits(1)
  home =                           header.getbits(1)
  copyright_identification_bit =   header.getbits(1)
  copyright_identification_start = header.getbits(1)
  aac_frame_length =               header.getbits(13)
  adts_buffer_fullness =           header.getbits(11)
  num_raw_data_blocks_in_frame =   header.getbits(2)
  if protection_absent == 0
    crc_data = input_file.read(2)
    header_length = 9
  else
    header_length = 7
  end

  puts "ADTS Header: (offset #{input_file.pos - header_length})"
  puts "  Error: Invalid syncword!" unless syncword == 0xfff
  if id == 0
    puts "  MPEG-4"
    puts "  Profile: #{MPEG4_PROFILES[profile]}"
  else
    puts "  MPEG-2"
    puts "  Profile: #{MPEG2_PROFILES[profile]}"
  end
  puts "  Protection Absent: #{protection_absent}"
  # puts "  Sampling Frequency Index: #{sampling_frequency_index}"
  @sample_rate = AAC_SAMPLE_RATES[sampling_frequency_index]
  puts "  Sample Rate: #{@sample_rate}"
  # puts "  Channel Configuration: #{channel_configuration}"
  puts "  Channels: #{AAC_CHANNEL_CONFIGS[channel_configuration]}"
  puts "  AAC Frame Length: #{aac_frame_length}"
  puts "  ADTS Buffer Fullness: #{adts_buffer_fullness}"
  puts "  Num blocks in frame: #{num_raw_data_blocks_in_frame}(+1)"
  
  data_length = aac_frame_length - header_length
  
  if data_length > 0
    aac_data = input_file.read(data_length)
    if aac_data.length == data_length
      if verbose_mode
        decoder = AacFrameDecoder.new(aac_data, num_raw_data_blocks_in_frame, @sample_rate, protection_absent)
      end
    else
      puts "  Data shorter than expected -- not decoding!"
    end
  end
  
  # if aac_data.length == data_length
  #   data = Bitstream.new(aac_data)
  #   
  #   if num_raw_data_blocks_in_frame == 0
  #     # adts_error_check
  #     if protection_absent == 0
  #       crc = data.getbits(16)
  #     end
  #   
  #     # raw_data_block
  #     while data.bit_offset < data.total_bits
  #       syntax_element = read_syntax_element(data)
  #       break if syntax_element[:id] == ID_END
  #   
  #       # break # We don't parse 'em right yet, so quit out.
  #     end
  #   else
  #     # adts_header_error_check
  #     if protection_absent == 0
  #       positions = []
  #       num_raw_data_blocks_in_frame.times { positions << data.getbits(16) }
  #       crc = data.getbits(16)
  #     end
  #   
  #     (num_raw_data_blocks_in_frame + 1).times do
  #       # raw_data_block
  #       while data.bit_offset < data.total_bits
  #         syntax_element = read_syntax_element(data)
  #         break if syntax_element[:id] == ID_END
  #   
  #         # break # We don't parse 'em right yet, so quit out.
  #       end
  #   
  #       # adts_raw_data_block_error_check
  #       if protection_absent == 0
  #         crc = data.getbits(16)
  #       end
  #     end
  #   end

end

puts
input_file.close rescue nil
