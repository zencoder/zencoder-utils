#!/usr/bin/env ruby

require 'erb'
require 'json'

def escape_for_single_quotes(filename)
  filename.gsub("'","'\\\\''")
end

def single_quote(filename)
  "'" + escape_for_single_quotes(filename) + "'"
end

def get_file_info(file)
  return @stored_info if file == @stored_info_filename
  file_info = `ffmpeg -i #{single_quote(file)} 2>&1`
  if file_info =~ /Stream \#0:([0-9]+).*Video:/
    video_stream_id = $1
  else
    puts "Video stream ID couldn't be determined - keyframes and bitrate disabled."
    video_stream_id = nil
  end

  if video_stream_id
    @stored_info = `ffmpeg -loglevel debug -dump -i #{single_quote(file)} -f yuv4mpegpipe -y /dev/null 2>&1 | grep -A 4 "stream ##{video_stream_id}:"`.split(/\nstream/)
  else
    @stored_info = []
  end

  @stored_info_filename = file
  @stored_info
end

def keyframes_for_file(file)
  keyframes = []

  get_file_info(file).each_with_index do |data, frame_number|
    keyframes << frame_number if data =~ /keyframe=1/
  end

  keyframes
end

def frame_sizes_for_file(file)
  get_file_info(file).map { |data| data =~ /size=([0-9]+)/ ? $1.to_i : 0 }
end

def mkfifo(filename)
  `mkfifo #{single_quote(filename)} 2>/dev/null`
end

def run_comparison(reference_file, degraded_file)
  ref_fifo = "/tmp/ref.fifo.y4m"
  mkfifo(ref_fifo)
  ref_decode_pid = Process.spawn("ffmpeg -i #{single_quote(reference_file)} -pix_fmt yuv444p -f yuv4mpegpipe -y #{single_quote(ref_fifo)}", :err => "/dev/null", :close_others => true)

  deg_fifo = "/tmp/deg.fifo.y4m"
  mkfifo(deg_fifo)
  deg_decode_pid = Process.spawn("ffmpeg -i #{single_quote(degraded_file)} -pix_fmt yuv444p -f yuv4mpegpipe -y #{single_quote(deg_fifo)}", :err => "/dev/null", :close_others => true)

  result_read, result_write = IO.pipe
  compare_pid = Process.spawn("./compare_444p_psnr #{single_quote(ref_fifo)} #{single_quote(deg_fifo)}", :out => result_write, :close_others => true)
  result_write.close

  result_data = result_read.read
  result_read.close

  Process.waitpid(ref_decode_pid)
  Process.waitpid(deg_decode_pid)
  Process.waitpid(compare_pid)

  result_data
end

def run_frame_to_frame_diff(reference_file)
  ref_fifo = "/tmp/ref.fifo.y4m"
  mkfifo(ref_fifo)
  ref_decode_pid = Process.spawn("ffmpeg -i #{single_quote(reference_file)} -pix_fmt yuv444p -f yuv4mpegpipe -y #{single_quote(ref_fifo)}", :err => "/dev/null", :close_others => true)

  result_read, result_write = IO.pipe
  compare_pid = Process.spawn("./frame_to_frame_diff #{single_quote(ref_fifo)}", :out => result_write, :close_others => true)
  result_write.close

  result_data = result_read.read
  result_read.close

  Process.waitpid(ref_decode_pid)
  Process.waitpid(compare_pid)

  result_data
end

def parse_data(data)
  # like:
  # Frame 0 PSNR (5ms): luma = inf, chroma_cb = inf, chroma_cr = inf
  # Frame 0 SSIM (514ms): luma = 1.00000, chroma_cb = 1.00000, chroma_cr = 1.00000
  # Frame 0 MS-SSIM (5233ms): luma = 1.00000, chroma_cb = 1.00000, chroma_cr = 1.00000
  #
  parsed_data = {
    :psnr => [],
    :ssim => [],
    :ms_ssim => []
  }
  data.each do |line|
    value = line.split(", ")[0].split(": ")[-1].split(" = ")[-1].to_f rescue 0
    if line.include?("PSNR")
      parsed_data[:psnr] << value
    elsif line.include?("MS-SSIM")
      parsed_data[:ms_ssim] << value
    elsif line.include?("SSIM")
      parsed_data[:ssim] << value
    end
  end
  parsed_data
end

def json_format_data(data)
  x = 0
  JSON.dump( data.map { |y| x += 1; { x: x - 1, y: (y * 10000.0).round/10000.0 } } )
end

dump_json = false
if ARGV[0] == "-j"
  dump_json = true
  ARGV.shift
end

reference_filename = ARGV[0]
comparison_filenames = ARGV[1..-1]
[reference_filename,comparison_filenames].flatten.each { |f| raise "File #{f} not found!" unless File.exist?(f) }

comparisons = []
comparison_filenames.each do |comparison_filename|
  STDERR.puts "Analyzing #{comparison_filename}"
  info = {
    :filename => comparison_filename,
    :keyframes => keyframes_for_file(comparison_filename),
    :frame_sizes => frame_sizes_for_file(comparison_filename)
  }
  max_frame_size = info[:frame_sizes].max
  info[:bitrate_data] = info[:frame_sizes].map { |s| 100 * s.to_f / max_frame_size }

  raw_data = run_comparison(reference_filename, comparison_filename).split("\n")
  info[:data] = parse_data(raw_data)

  comparisons << info
end

STDERR.puts "Getting frame diff info for #{reference_filename}"
raw_data = run_frame_to_frame_diff(reference_filename).split("\n")
frame_diff_data = parse_data(raw_data)

min_max_values = []
min_max_values << comparisons.map { |info| info[:data][:psnr].min }.min
min_max_values << comparisons.map { |info| info[:data][:psnr].max }.max
min_max_values << comparisons.map { |info| info[:data][:ssim].min }.min
min_max_values << comparisons.map { |info| info[:data][:ssim].max }.max
min_max_values << comparisons.map { |info| info[:bitrate_data].min }.min
min_max_values << comparisons.map { |info| info[:bitrate_data].max }.max

if dump_json
  data = {
    :reference_filename => reference_filename,
    :comparisons => comparisons
  }
  puts JSON.dump(data)
  exit(0)
end

puts <<"_END_OF_HTML_"
<html>
  <head>
    <title>Codec Quality Comparison</title>

    <link href="http://vjs.zencdn.net/4.6/video-js.css" rel="stylesheet">
    <script src="http://vjs.zencdn.net/4.6/video.js"></script>

    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/d3/d3.min.js"></script>
    <script src="js/app.js"></script>
    <style type="text/css">

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.video-js.vjs-default-skin .vjs-big-play-button { display: none; }

</style>
  </head>
  <body>
    <h1>Codec Quality Comparison: #{File.basename(reference_filename)} vs [#{comparisons.map { |c| File.basename(c[:filename]) }.join(', ')}]</h1>

    <table>
    <tr><td>
    <video id="reference-video" class="video-js vjs-default-skin" controls preload="auto" width="640" height="360" data-setup='{"example_option":true}'>
      <source src="#{File.basename(reference_filename)}" type="video/mp4" />
    </video>
    </td><td>
    <video id="degraded-video" class="video-js vjs-default-skin" controls preload="auto" width="640" height="360" data-setup='{"example_option":true}'>
      <source src="#{File.basename(comparisons.first[:filename])}" type="video/mp4" />
    </video>
    </td></tr>
    </table>

    <script>
_END_OF_HTML_

puts "$(function() {
  var data = ["

    comparisons.each_with_index do |info, index|
      puts "{ name: 'PSNR-#{index+1}', color: 'red', data: #{json_format_data(info[:data][:psnr])}, },"
      puts "{ name: 'SSIM-#{index+1}', color: 'green', data: #{json_format_data(info[:data][:ssim])}, },"
      puts "{ name: 'Bitrate-#{index+1}', color: 'blue', data: #{json_format_data(info[:bitrate_data])}, },"
    end

    puts "{ name: 'PSNR-D', color: '#f99', data: #{json_format_data(frame_diff_data[:psnr].map { |v| 80 - v })}, },"
    puts "{ name: 'SSIM-D', color: '#9f9', data: #{json_format_data(frame_diff_data[:ssim].map { |v| 1.0 - v })}, },"

puts "];
  drawChart(data, [#{comparisons.first[:keyframes].join(',')}], [#{min_max_values.join(',')}]);
  });"

puts <<"_END_OF_HTML_"
    </script>
  </body>
</html>
_END_OF_HTML_

